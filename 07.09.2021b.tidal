d1
  -- $ superimpose (slow 2)
  $ loopAt 4
  $ jux (rev)
  $ chop "<16 8 4>" $ slow 2 $ n (run 9)
  -- # delay 2
  |+ s "<{hoarder roll_door_2}/2 race_car Andreis_Bell>"
  |+ speed "1 0.5 0.25"
  -- # unit "c"
  -- # crush 5
  # amp 0.4
  -- # begin ( rev "0.24 0 0.75" )
  -- # end "0.5 0.75 1 0.25"
  -- # amp (sine * 0.5)
  -- +| xsdelay "0 4"
  -- # pan sine

d1 silence

d2 $ every 3 (slow 8) $ jux (every 2 rev) $ chop "<64 128>/2" $ n (slow 2 rand("<1 2 3 4 5 6 7 8 9 10> ~"))
    # s "<hoarder dishes> hoarder ~"
    # begin "<0.25 0.5> 0 0"
    # amp 0.4
    -- # delay 0.1
    # room 0.5
    # crush ( "16 8 4")
       -- # pan sine

d2 silence

d3 $ slow 2 $ every 3 (jux (fast "2 <4 1 6>*4")) $ n "0 2 1 <3 [4 <5 6>]/2 5>"
  # s "[<Bass_Drums Hats>, <Hats Snare_Drums>/2]"
  -- # crush 0.5
  # amp 0.2
  # delay 0.8
  # room 0.5

d3 silence


d4 $ jux (slow "4 3 2 1") $ n "{2@3 _4, 3} <4 5 6 6>/2"
  # s "<~ glasstap:2 Bass_Drums> <Snare_Drums glasstap>*2"
  # delay 0.2
  # amp 0.4
 # pan (sine * 0.5)
 # squiz (sine * "{1 _ 2 _ 4}*2")

 d4 silence

d5 $ jux (slow "4 3 2") $ n "{2 _4, ~ 3} <4 _ 5 _ 6 _ 6 __>"
  # s "<Bass_Drops ~ >"
  # amp 0.6
  |+ squiz (sine * "<1 _ 2 _ 4>/2")

d5 silence

hush

d1 $ loopAt 2 $ jux (striate 16) $ n (scan 8) # sound "[Bass_Drums, Hats] hoarder:3" # speed (perlin2 (sine*4) + 1)
# delay 0.5
# room 0.5

d2 $ sound "arpy*4" # speed (rand + 0.5)

let pats =
      [
        ("a", stack [n "c4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[c3,g4,c4]" # s "superpiano"# gain "0.7"
                    ]
        ),
        ("b", stack [n "d4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[d3,a4,d4]" # s "superpiano"# gain "0.7"
                    ]
        ),
        ("c", stack [n "f4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[f4,c5,f4]" # s "superpiano"# gain "0.7"
                    ]
        )
      ]
    fx = [("reverb", (# (room 0.8 # sz 0.99 # orbit 1))),
          ("faster", fast 2)
         ]
in
d1 $ ur 12 "a b:reverb c:faster" pats fx

let pats = [("drums", s "drum cp*2"),
            ("melody", s "arpy:2 arpy:3 arpy:5"),
            ("craziness", s "cp:4*8" # speed ( sine + 0.5))
           ]
    fx = [("higher", (# speed 2))]
in
d1 $ ur 8 "[drums, melody] [drums,craziness,melody] melody:higher" pats fx


d1 $ seqP [
  (0, 12, sound "bd bd*2"),
  (4, 12, sound "hh*2 [sn cp] cp future*4"),
  (8, 12, sound (samples "arpy*8" (run 16)))
]

d1 $ qtrigger 1 $ seqPLoop [
  (0, 12, sound "bd bd*2"),
  (4, 12, sound "hh*2 [sn cp] cp future*4"),
  (8, 12, sound (samples "arpy*8" (run 16)))
]

d1 $ sound "bd" $ speed (sine * 20)

d1 $ s "[bd*3,hh*4,[~ cp]*2, bass*4]"

resetCycles

:t rev
